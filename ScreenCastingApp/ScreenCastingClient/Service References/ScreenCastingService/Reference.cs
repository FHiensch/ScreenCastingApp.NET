//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScreenCastingClient.ScreenCastingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScreenCastingService.IScreenCastingService")]
    public interface IScreenCastingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/SayHello", ReplyAction="http://tempuri.org/IScreenCastingService/SayHelloResponse")]
        string SayHello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/SayHello", ReplyAction="http://tempuri.org/IScreenCastingService/SayHelloResponse")]
        System.Threading.Tasks.Task<string> SayHelloAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/Cast", ReplyAction="http://tempuri.org/IScreenCastingService/CastResponse")]
        System.IO.Stream Cast();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/Cast", ReplyAction="http://tempuri.org/IScreenCastingService/CastResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> CastAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/GetImage", ReplyAction="http://tempuri.org/IScreenCastingService/GetImageResponse")]
        System.IO.Stream GetImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/GetImage", ReplyAction="http://tempuri.org/IScreenCastingService/GetImageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/PostImage", ReplyAction="http://tempuri.org/IScreenCastingService/PostImageResponse")]
        void PostImage(System.IO.Stream img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenCastingService/PostImage", ReplyAction="http://tempuri.org/IScreenCastingService/PostImageResponse")]
        System.Threading.Tasks.Task PostImageAsync(System.IO.Stream img);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScreenCastingServiceChannel : ScreenCastingClient.ScreenCastingService.IScreenCastingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScreenCastingServiceClient : System.ServiceModel.ClientBase<ScreenCastingClient.ScreenCastingService.IScreenCastingService>, ScreenCastingClient.ScreenCastingService.IScreenCastingService {
        
        public ScreenCastingServiceClient() {
        }
        
        public ScreenCastingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScreenCastingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenCastingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenCastingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SayHello() {
            return base.Channel.SayHello();
        }
        
        public System.Threading.Tasks.Task<string> SayHelloAsync() {
            return base.Channel.SayHelloAsync();
        }
        
        public System.IO.Stream Cast() {
            return base.Channel.Cast();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> CastAsync() {
            return base.Channel.CastAsync();
        }
        
        public System.IO.Stream GetImage() {
            return base.Channel.GetImage();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync() {
            return base.Channel.GetImageAsync();
        }
        
        public void PostImage(System.IO.Stream img) {
            base.Channel.PostImage(img);
        }
        
        public System.Threading.Tasks.Task PostImageAsync(System.IO.Stream img) {
            return base.Channel.PostImageAsync(img);
        }
    }
}
